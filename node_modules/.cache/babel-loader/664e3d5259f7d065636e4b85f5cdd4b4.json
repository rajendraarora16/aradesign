{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nexport var Box =\n/*#__PURE__*/\nfunction () {\n  function Box() {\n    _classCallCheck(this, Box);\n\n    this.dimension = 300;\n    this.halfDimen = this.dimension / 2;\n    this.x = -this.dimension;\n    this.y = -this.dimension;\n    this.centerX = 0;\n    this.centerY = 0;\n  }\n\n  _createClass(Box, [{\n    key: \"isPointInside\",\n    value: function isPointInside(x, y) {\n      if (x < this.x + this.dimension && x > this.x && y < this.y + this.dimension && y > this.y) {\n        var dist = Math.sqrt(Math.pow(x - this.centerX, 2) + Math.pow(y - this.centerY, 2));\n        var alpha = 1 - dist / this.halfDimen;\n        return Math.max(alpha, 0);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      this.x = x - this.halfDimen;\n      this.y = y - this.halfDimen;\n      this.centerX = x;\n      this.centerY = y;\n    }\n  }]);\n\n  return Box;\n}();\n;\nexport var Dot =\n/*#__PURE__*/\nfunction () {\n  function Dot(x, y, box, animate) {\n    _classCallCheck(this, Dot);\n\n    this.x = x;\n    this.y = animate ? 0 : y;\n    this.yCache = y;\n    this.alpha = 0.1;\n    this.box = box;\n  }\n\n  _createClass(Dot, [{\n    key: \"animate\",\n    value: function animate(step) {\n      this.y = this.yCache * step;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var addAlpha = this.box.isPointInside(this.x, this.y);\n      ctx.fillStyle = \"rgba(255, 255, 255, \".concat(this.alpha + addAlpha, \")\");\n      ctx.beginPath();\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(this.x + 5, this.y);\n      ctx.lineTo(this.x + 2.5, this.y - 4); // ctx.arc(this.x, this.y, 2, 0, 2 * Math.PI);\n\n      ctx.closePath();\n      ctx.fill();\n    }\n  }]);\n\n  return Dot;\n}();","map":{"version":3,"sources":["/Users/pradip/aradesigns/components/screen-pattern/structs.js"],"names":["Box","dimension","halfDimen","x","y","centerX","centerY","dist","Math","sqrt","pow","alpha","max","Dot","box","animate","yCache","step","ctx","addAlpha","isPointInside","fillStyle","beginPath","moveTo","lineTo","closePath","fill"],"mappings":";;AAAA,WAAaA,GAAb;AAAA;AAAA;AACI,iBAAc;AAAA;;AACV,SAAKC,SAAL,GAAiB,GAAjB;AACA,SAAKC,SAAL,GAAiB,KAAKD,SAAL,GAAe,CAAhC;AAEA,SAAKE,CAAL,GAAS,CAAE,KAAKF,SAAhB;AACA,SAAKG,CAAL,GAAS,CAAE,KAAKH,SAAhB;AAEA,SAAKI,OAAL,GAAe,CAAf;AACA,SAAKC,OAAL,GAAe,CAAf;AACH;;AAVL;AAAA;AAAA,kCAYkBH,CAZlB,EAYqBC,CAZrB,EAYwB;AAChB,UAAID,CAAC,GAAG,KAAKA,CAAL,GAAS,KAAKF,SAAlB,IAA+BE,CAAC,GAAG,KAAKA,CAAxC,IAA6CC,CAAC,GAAG,KAAKA,CAAL,GAAS,KAAKH,SAA/D,IAA4EG,CAAC,GAAG,KAAKA,CAAzF,EAA4F;AACxF,YAAMG,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASP,CAAC,GAAG,KAAKE,OAAlB,EAA2B,CAA3B,IAAgCG,IAAI,CAACE,GAAL,CAASN,CAAC,GAAG,KAAKE,OAAlB,EAA2B,CAA3B,CAA1C,CAAb;AACA,YAAMK,KAAK,GAAG,IAAKJ,IAAI,GAAC,KAAKL,SAA7B;AACA,eAAOM,IAAI,CAACI,GAAL,CAASD,KAAT,EAAgB,CAAhB,CAAP;AACH;;AAED,aAAO,CAAP;AACH;AApBL;AAAA;AAAA,yBAsBSR,CAtBT,EAsBYC,CAtBZ,EAsBe;AACP,WAAKD,CAAL,GAASA,CAAC,GAAG,KAAKD,SAAlB;AACA,WAAKE,CAAL,GAASA,CAAC,GAAG,KAAKF,SAAlB;AAEA,WAAKG,OAAL,GAAeF,CAAf;AACA,WAAKG,OAAL,GAAeF,CAAf;AACH;AA5BL;;AAAA;AAAA;AA6BC;AAED,WAAaS,GAAb;AAAA;AAAA;AACI,eAAYV,CAAZ,EAAeC,CAAf,EAAkBU,GAAlB,EAAuBC,OAAvB,EAAgC;AAAA;;AAC5B,SAAKZ,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASW,OAAO,GAAG,CAAH,GAAOX,CAAvB;AACA,SAAKY,MAAL,GAAcZ,CAAd;AACA,SAAKO,KAAL,GAAa,GAAb;AACA,SAAKG,GAAL,GAAWA,GAAX;AACH;;AAPL;AAAA;AAAA,4BASYG,IATZ,EASkB;AACV,WAAKb,CAAL,GAAS,KAAKY,MAAL,GAAcC,IAAvB;AACH;AAXL;AAAA;AAAA,yBAaSC,GAbT,EAac;AACN,UAAMC,QAAQ,GAAG,KAAKL,GAAL,CAASM,aAAT,CAAuB,KAAKjB,CAA5B,EAA+B,KAAKC,CAApC,CAAjB;AAEAc,MAAAA,GAAG,CAACG,SAAJ,iCAAuC,KAAKV,KAAL,GAAaQ,QAApD;AACAD,MAAAA,GAAG,CAACI,SAAJ;AACAJ,MAAAA,GAAG,CAACK,MAAJ,CAAW,KAAKpB,CAAhB,EAAmB,KAAKC,CAAxB;AACAc,MAAAA,GAAG,CAACM,MAAJ,CAAW,KAAKrB,CAAL,GAAS,CAApB,EAAuB,KAAKC,CAA5B;AACAc,MAAAA,GAAG,CAACM,MAAJ,CAAW,KAAKrB,CAAL,GAAS,GAApB,EAAyB,KAAKC,CAAL,GAAS,CAAlC,EAPM,CAQN;;AACAc,MAAAA,GAAG,CAACO,SAAJ;AACAP,MAAAA,GAAG,CAACQ,IAAJ;AACH;AAxBL;;AAAA;AAAA","sourcesContent":["export class Box{\n    constructor() {\n        this.dimension = 300\n        this.halfDimen = this.dimension/2\n\n        this.x = - this.dimension\n        this.y = - this.dimension\n\n        this.centerX = 0\n        this.centerY = 0\n    }\n\n    isPointInside(x, y) {\n        if (x < this.x + this.dimension && x > this.x && y < this.y + this.dimension && y > this.y) {\n            const dist = Math.sqrt(Math.pow(x - this.centerX, 2) + Math.pow(y - this.centerY, 2))\n            const alpha = 1 - (dist/this.halfDimen)\n            return Math.max(alpha, 0);\n        }\n    \n        return 0;\n    }\n    \n    move(x, y) {\n        this.x = x - this.halfDimen;\n        this.y = y - this.halfDimen;\n    \n        this.centerX = x\n        this.centerY = y\n    }\n};\n\nexport class Dot {\n    constructor(x, y, box, animate) {\n        this.x = x\n        this.y = animate ? 0 : y\n        this.yCache = y\n        this.alpha = 0.1\n        this.box = box\n    }\n\n    animate(step) {\n        this.y = this.yCache * step\n    }\n\n    draw(ctx) {\n        const addAlpha = this.box.isPointInside(this.x, this.y)\n\n        ctx.fillStyle = `rgba(255, 255, 255, ${this.alpha + addAlpha})`;\n        ctx.beginPath();\n        ctx.moveTo(this.x, this.y);\n        ctx.lineTo(this.x + 5, this.y);\n        ctx.lineTo(this.x + 2.5, this.y - 4);\n        // ctx.arc(this.x, this.y, 2, 0, 2 * Math.PI);\n        ctx.closePath();\n        ctx.fill();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}